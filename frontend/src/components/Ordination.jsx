import React, {useEffect, useState } from 'react';
import Button from '@mui/material/Button';
import CloudUploadIcon from '@mui/icons-material/CloudUpload';

const Ordination = ({ handleNavigateTo }) => {
    const [parameters, setParameters] = useState({
        glomby: '',
        algorithm: '',
        PCA_Components: '',
        distmehod: '',
        subsetby: '',
        compareby: '',
        colourby: '',
        colorby: '',
        shapeby: '',
        samplesToKeep: '',
        featuresToKeep: '',
        samplesToHighlight: '',
        ignoreunclassified: true,
        applyfilters: 'none',
        featcutoff: '',
        GenomeCompletenessCutoff: '',
        discard_SDoverMean_below: '',
        asPPM: true,
        normalization: 'relabund',
        PPM_normalize_to_bases_sequenced: false,
        assay_for_matrix: 'BaseCounts',
        use_letters_as_shapes: false,
        sizeby: '',
        connectby: '',
        connection_orderby: '',
        textby: '',
        ellipseby: '',
        dotsize: 2,
        log2tran: false,
        tsne_perplx: '',
        max_neighbors: 15,
        permanova: false,
        plotcentroids: false,
        highlight_centroids: false,
        show_centroid_distances: false,
        calculate_centroid_distances_in_all_dimensions: false,
        addtit: '',
        cdict: '',
        grid: false,
        forceaspectratio: '',
        numthreads: 1,
        return_coordinates_matrix: false,
        permanova_permutations: 10000,
        include_components_variance_plot: false,
        class_to_ignore: 'N_A',
    });

    const displayNames = {
        glomby: 'Glom By',
        algorithm: 'Algorithm',
        PCA_Components: 'PCA Components',
        distmehod: 'Distance Method',
        subsetby: 'Subset By',
        compareby: 'Compare By',
        colourby: 'Colour By',
        colorby: 'Color By',
        shapeby: 'Shape By',
        samplesToKeep: 'Samples to Keep',
        featuresToKeep: 'Features to Keep',
        samplesToHighlight: 'Samples to Highlight',
        ignoreunclassified: 'Ignore Unclassified',
        applyfilters: 'Apply Filters',
        featcutoff: 'Feature Cutoff',
        GenomeCompletenessCutoff: 'Genome Completeness Cutoff',
        discard_SDoverMean_below: 'Discard SD over Mean Below',
        asPPM: 'As PPM',
        normalization: 'Normalization',
        PPM_normalize_to_bases_sequenced: 'PPM Normalize to Bases Sequenced',
        assay_for_matrix: 'Assay for Matrix',
        use_letters_as_shapes: 'Use Letters as Shapes',
        sizeby: 'Size By',
        connectby: 'Connect By',
        connection_orderby: 'Connection Order By',
        textby: 'Text By',
        ellipseby: 'Ellipse By',
        dotsize: 'Dot Size',
        log2tran: 'Log2 Transform',
        tsne_perplx: 't-SNE Perplexity',
        max_neighbors: 'Max Neighbors',
        permanova: 'PERMANOVA',
        plotcentroids: 'Plot Centroids',
        highlight_centroids: 'Highlight Centroids',
        show_centroid_distances: 'Show Centroid Distances',
        calculate_centroid_distances_in_all_dimensions: 'Calculate Centroid Distances in All Dimensions',
        addtit: 'Add Title',
        cdict: 'Color Dictionary',
        grid: 'Grid',
        forceaspectratio: 'Force Aspect Ratio',
        numthreads: 'Number of Threads',
        return_coordinates_matrix: 'Return Coordinates Matrix',
        permanova_permutations: 'PERMANOVA Permutations',
        include_components_variance_plot: 'Include Components Variance Plot',
        class_to_ignore: 'Class to Ignore' 
    };
}
