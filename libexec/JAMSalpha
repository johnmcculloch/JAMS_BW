#!/usr/bin/env Rscript
suppressPackageStartupMessages(library(RCurl))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
suppressPackageStartupMessages(library(futile.logger))
suppressPackageStartupMessages(library(parallel))
suppressPackageStartupMessages(library(benchmarkme))
#####################################
# Define System-specific Functions ##
#####################################
if ((.Platform$OS.type) != "unix"){
    stop("JAMS only works on UNIX. Install Linux and try again.")
}

#Get slurm job ID
slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))

#Decide which kind of system you are on.
if (nchar(slurmjobid) < 3){
   print("You are not on a Slurm Workload Cluster")
   #Define appropriate functions for non-slurm system
   detectBatchCPUs <- function() {
        ncores <- detectCores()
        if (is.na(ncores)) {
            stop("Could not determine how many CPUs you have. Aborting.")
        }
        return(ncores)
    }

    detectAvailRAM <- function(){
        totmembytes <- as.numeric(get_ram())

        return(totmembytes)
    }

} else {
    print(paste("You are on a Slurm Workload Manager Cluster under jobID", slurmjobid))
    #Define appropriate functions for slurm system
    detectBatchCPUs <- function() {
        slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))
        ncores <- as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK"))

        if (is.na(ncores)) {
            #Try plan B
            sacctraw <- system2("sacct", args = c("-j", slurmjobid, "-X", "-P"), stdout = TRUE)
            jobinforaw <- sacctraw[2]
            jobinfoheaders <- sacctraw[1]
            jobinfo <- unlist(strsplit(jobinforaw, split="\\|"))
            names(jobinfo) <- unlist(strsplit(jobinfoheaders, split="\\|"))
            ncores <- as.integer(jobinfo["AllocCPUS"])
            print(jobinfo)
            if (is.na(ncores)) {
                stop("Could not determine how many CPUs you have. Aborting.")
            }
        }

        return(ncores)
    }

    detectAvailRAM <- function(){
        mempercpu <- as.integer(Sys.getenv("SLURM_MEM_PER_CPU"))
        mempernode <- as.integer(Sys.getenv("SLURM_MEM_PER_NODE"))
        cpuspertask <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))

        if (!(is.na(mempernode))){
            totmem <- mempernode
        } else {
            totmem <- mempercpu * cpuspertask
        }

        totmembytes <- totmem * 1000000

        return(totmembytes)
    }
}

############################
## Define other functions ##
############################
filetype <- function(path){
    f <- file(path)
    ext <- summary(f)$class
    close.connection(f)
    ext
}

# get path of running script
getScriptPath <- function() {
    cmdArgs <- commandArgs(trailingOnly = FALSE)
    needle <- "--file="
    match <- grep(needle, cmdArgs)
    if (length(match) > 0) {
        return(dirname(normalizePath(sub(needle, "", cmdArgs[match]))))
    } else {
        return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
    }
}

JAMSauthors <- as.character(as.person(packageDescription("JAMS")$Author))

#########################
# Get options from args #
#########################
#Define defaults
defopt <- list()
defopt$verstr <- paste0("JAMS v", packageVersion("JAMS"))
defopt$outdir <- getwd()
defopt$host <- "human"
defopt$seqtype <- "illuminape"
defopt$assembler <- "megahit"
defopt$analysis <- "metagenome"
defopt$prefix <- "MySample"
defopt$useipro <- FALSE
defopt$testdependencies <- FALSE
defopt$threads <- detectBatchCPUs()
defopt$krakenconfidencescore <- 0.000005
defopt$classifyunassembled <- FALSE
defopt$bin_contigs_with_metabat <- FALSE

option_list <- list(
    make_option(c("-f", "--R1"), action="store", default=NULL,
                type="character",
                help="forward (R1) reads"),

    make_option(c("-r", "--R2"), action="store", default=NULL,
                type="character",
                help="reverse (R2) reads"),

    make_option(c("-U", "--SE"), action="store", default=NULL,
                type="character",
                help="unpaired reads"),

    make_option(c("-g", "--sraaccession"), action="store", default=NULL,
                type="character",
                help="SRA accession to get reads from"),

    make_option(c("-c", "--contigs"), action="store", default=NULL,
                type="character",
                help="Use these contigs in multifasta format as input"),

    make_option(c("-a", "--assemblyaccession"), action="store", default=NULL,
                type="character",
                help="GenBank assembly accession to get contigs from (example: GCA_000969225.1). Any reads input will be ignored."),

    make_option(c("-t", "--readstarball"), action="store", default=NULL,
                type="character",
                help = "Tarball (.tar.gz) containing reads file(s) in fastq format."),

    make_option(c("-d", "--dbdir"), default=NULL, action="store",
                type="character",
                help = str_c("path to JAMS database folder")),

    make_option(c("-k", "--krakenconfidencescore"), default=defopt$krakenconfidencescore,
                type = "numeric", action = "store",
                help = str_c("confidence score threshold for kraken2 classificaiton (default: ", defopt$krakenconfidencescore, "). Only change this if you really know what you are doing.")),

    make_option(c("-o", "--outdir"), default=defopt$outdir, action="store",
                type="character",
                help = str_c("output folder (default: ", defopt$outdir, ")")),

    make_option(c("-p", "--prefix"), default=NULL, action="store",
                type="character",
                help = str_c("output prefix (default: ", defopt$prefix, ")")),

    make_option(c("-H", "--host"), default=defopt$host, action="store",
                type="character",
                help = str_c("host species (human, mouse, none, taxid, species_name or /path/to/index default: ", defopt$host, ")")),

    make_option(c("-S", "--seqtype"), default=defopt$seqtype, action="store",
                type="character",
                help = str_c("choose sequence type (illuminape, illuminamp, pacbio, iontorrent, default: ", defopt$seqtype, ")")),

    make_option(c("-A", "--analysis"), default=defopt$analysis, action="store",
                type="character",
                help = str_c("choose analysis type (metagenome, metatranscriptome, isolate, isolaternaseq, default: ", defopt$analysis, ")")),

    make_option(c("-w", "--assembler"), default=defopt$assembler, action="store",
                type="character",
                help = str_c("choose assembler (megahit, spades, default: ", defopt$assembler, ")")),

    make_option(c("-b", "--maxbases_input"), default=NULL, action="store",
                type="numeric",
                help = str_c("cap the number of bases used for assembly to this value. If the number of bases for assembly is larger than this value, input reads will be subset to contain this amount. Default: no subsetting.")),

    #Note: taking unassembled reads into account has been deprecated since JAMS ver 2.0.0.
    #    make_option(c("-q", "--classifyunassembled"), default=defopt$classifyunassembled,
    #                action="store_true",
    #                help = str_c("classify unassembled reads by kraken2 and include counts in taxonomic abundance. Irrelevant for isolates. default: ", defopt$classifyunassembled, ")")),

    #make_option(c("-m", "--bin_contigs_with_metabat"), default=defopt$bin_contigs_with_metabat,
    #            action="store_true",
    #            help = str_c("bin contigs into Metagenome Assembled Genomes using MetaBAT2. Only works if analysis (-A) is set to metagenome, default: ", defopt$bin_contigs_with_metabat, ")")),

    make_option(c("-x", "--threads"), default=defopt$threads, action="store",
                type="numeric",
                help = str_c("number of threads (default: ", defopt$threads, ")")),

    make_option(c("-n", "--useipro"), default=defopt$skipipro, action="store_true",
                help = str_c("use InterProScan for classifying predicted proteome. Requires the InterProScan module on NIH HPC Biowulf, default: ", defopt$useipro, ")")),

    make_option(c("-z", "--testdependencies"), default=defopt$testdependencies, action="store_true",
                help = str_c("test dependencies only and leave, default: ", defopt$testdependencies, ")")),

    make_option(c("-v", "--version"), action="store_true",
                help ="report version")
)

# parse the options
args <- commandArgs(trailingOnly = TRUE)
opt <- parse_args(OptionParser(option_list = option_list), args)
opt <- merge.list(opt, defopt)

#####################
## Set environment ##
#####################

# print version & exit if -v
if (!is.null(opt$version)) {
    print(opt$verstr)
    quit()
}

#Get JAMS exexcutables path
get_JAMS_exec_path <- function(){
    JAlnk <- system2('which', args = "JAMSalpha", stdout = TRUE, stderr = FALSE)
    JApath <- system2('readlink', args = JAlnk, stdout = TRUE, stderr = FALSE)
    folds <- unlist(strsplit(JApath, split = .Platform$file.sep))
    folds <- folds[1:(length(folds) - 1)]
    libexecpath <- paste(folds, collapse = .Platform$file.sep)

    return(libexecpath)
}

opt$bindir <- get_JAMS_exec_path()

#Abort if unreasonable instructions
if (!(opt$analysis %in% c("metagenome", "metatranscriptome", "isolate", "isolaternaseq"))){
    print("For an analysis chooose between one of these four options: metagenome, metatranscriptome, isolate or isolaternaseq.")
    parse_args(OptionParser(option_list = option_list), c("-h"))
    q()
}

#No point in running metabat if not a shotgun metagenome
if (opt$analysis != "metagenome"){
    opt$bin_contigs_with_metabat <- FALSE
} else {
    opt$bin_contigs_with_metabat <- TRUE
}

#Fix path relativity
fixrelpath <- function(JAMSpath = NULL){
    require(R.utils)
    if (!(isAbsolutePath(JAMSpath))){
        fixedpath <- getAbsolutePath(JAMSpath)
    } else {
        fixedpath <- JAMSpath
    }
    #Chomp a "/" from the end of paths
    fixedpath <- gsub("/$", "", fixedpath)

    return(fixedpath)
}
for (pathtofix in c("R1", "R2", "SE", "contigs", "readstarball", "outdir", "dbdir")){
    if (!is.null(opt[[pathtofix]])){
        opt[[pathtofix]] <- fixrelpath(opt[[pathtofix]])
    }
}

# give help if needed input option not provided
if (is.null(opt$dbdir)) {
    print("You must supply the JAMS database folder.")
    parse_args(OptionParser(option_list=option_list), c("-h"))
    q()
} else {
    #If db folder does exist, does it have the appropriate structure
    #Stop if unreasonable settings
    if (!(dir.exists(opt$dbdir))){
        flog.info("JAMS db folder not found. You must supply one. Aborting now.")
        q()
    } else {
        #DB path was supplied. Now validate the structure.
        suppressPackageStartupMessages(library(JAMS))
        #detect resources
        opt$totmembytes <- detectAvailRAM()
        flog.info(paste("You have ~", round((opt$totmembytes)/1000000000, 1), "Gigabytes of RAM memory"))
        flog.info(paste("You have", opt$threads, "CPUs to run on"))
        opt <- check_resources(opt = opt)
    }
}

#Flip Interpro use logic to maintain code consistency
opt$skipipro <- !(opt$useipro)
#Note: classifying unassambled reads is now being phased out since JAMS ver 2.0.0, JAN 2025.
opt$classifyunassembled <- FALSE

#Abort if all is not good.
if (opt$abort == TRUE){
    flog.info("Aborting now.")
    q()
}

###################
## Main Function ##
###################

#If all is OK, then create the project folder structure
opt$sampledir <- file.path(opt$outdir, paste0(opt$prefix, "_JAMS"))
flog.info("Creating Sample output folder")
dir.create(opt$sampledir, showWarnings = TRUE, recursive = TRUE)

opt$logfile <- file.path(opt$outdir, paste0(opt$prefix, "_JAMS.log"))
flog.appender(appender.tee(opt$logfile))

flog.info("JAMS - Just A Microbiology System")
flog.info(paste("Version", opt$verstr))
flog.info(paste("By:", paste(JAMSauthors, collapse = "; ")))

flog.info(print_jams_ASCII(palette = "ocean"))

#note: phasing out temporary directories
opt$workdir <- opt$sampledir

opt$projimage <- file.path(opt$sampledir, ".RData")

flog.info(paste("Database folder is", opt$dbdir))
flog.info(paste("Output folder is", opt$outdir))
flog.info(paste("Final sample folder is", opt$sampledir))
flog.info(paste("Working folder is", opt$workdir))
flog.info(paste("Host is", opt$host))
flog.info(paste("Project type is", opt$analysis))

#######################
## Run JAMS pipeline ##
#######################
#Start the clock
opt$starttime <- Sys.time()
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

#Obtain contigs
setwd(opt$workdir)
opt <- get_contigs(opt = opt)

#Functional annotation
opt <- annotate_contigs(opt = opt)
opt <- get_feature_stats(opt = opt, doContigs = TRUE, doFeatures = FALSE)
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

#Get basepair coverage amount of each contig and function
opt <- get_contig_coverage(opt = opt, markduplicates = FALSE)

#Denoise contigs if metagenome
if (opt$analysis == "metagenome"){
    opt <- denoise_contigs(opt = opt, small_large_length_threshold = 2000)
}
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)


#Launch interproscan if on a cluster
#This is a Biowulf-only application. 
if (nchar(slurmjobid) < 3){
    flog.info("Skipping Interproscan. Interproscan in computationally very intensive and is best run on a computer cluster.")
} else {
    if (opt$useipro == TRUE){
        opt <- launch_interpro(opt = opt)
    }
}
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)


#Initialize index indexorum for storing abundances 
opt$abundances <- list()
opt$abundances$taxonomic <- list()
opt$abundances$functional <- list()

#Process MAGs, if applicable
if (opt$analysis == "metagenome"){
    opt <- sort_contigs_into_bins(opt = opt)
    opt <- process_MAGs(opt = opt)
}
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

#Process Contig LKTs
opt <- process_contig_LKTs(opt = opt)
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

if (opt$analysis == "metagenome"){
    opt <- consolidate_entities_in_sample(opt = opt)
}
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

#Do specific blast-based analyses
opt <- blast_databases(opt = opt, blastanalyses = opt$blastanalyses)
opt <- add_blast_results_to_featuredata(opt = opt, blastanalyses = opt$blastanalyses)
#Get feature stats
opt <- get_feature_stats(opt = opt)
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

#Make functional analysis
opt <- harvest_functions(opt = opt, doinparallel = TRUE)
IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

opt$taxonomic_Quality_split_list  <- lapply(names(opt$abundances$taxonomic), function (x) { evaluate_consolidated_Quality_split_df(consolidated_df = opt$abundances$taxonomic[[x]]) } )
names(opt$taxonomic_Quality_split_list) <- names(opt$abundances$taxonomic)

#Compute readcounts if there are any reads
if ("readsdir" %in% names(opt)){
    opt <- compute_readcounts(opt = opt)
    #Save reads to outdir if applicable
    bank_reads(opt = opt)
}

#opt <- consolidate_tables(opt = opt)

#End the analysis and gather information on the run
opt$endtime <- Sys.time()
opt <- gather_run_info(opt = opt)

#Bank information gathered
objectstoexport <- names(opt)[names(opt) %in% c("contigsdata", "featuredata", "abundances", "taxonomic_Quality_split_list", opt$blastanalyses, "bam_contig_depths", "TNF_contigs", "readstats", "fastqstats", "projinfo")]
for (objname in objectstoexport){
    expfn <- file.path(opt$sampledir, paste(paste(opt$prefix, objname, sep = "_"), "rds", sep = "."))
    saveRDS(opt[[objname]], file = expfn)
}
#IO_jams_workspace_image(opt = opt, operation = "save", verbose = FALSE)

#Make a .jams file
make_jams_file(opt = opt, objectstoinclude = objectstoexport, outdir = opt$outdir)

#Plot report
print_jams_report(opt = opt, elements = c("readplots", "taxonomy", opt$blastanalyses, "func"))

#Cleanup and compress project
setwd(opt$sampledir)
unlink(c(opt$tmpsampdir, opt$iprodir, opt$covdir, opt$readsdir), recursive = TRUE)
IO_jams_workspace_image(opt = opt, operation = "save", verbose = TRUE)

setwd(opt$outdir)
JAMStarball <- paste(paste0(opt$prefix, "_JAMS"), "tar", "gz", sep=".")
tarcmd <- paste("tar", "cf", "-", paste0(opt$prefix, "_JAMS"), "|", "pigz", "-9", "-p", opt$threads, ">", JAMStarball, collapse=" ")
flog.info(paste("Compressing JAMS run for sample", opt$prefix))
system(tarcmd)

flog.info(paste0("JAMS run of sample ", opt$prefix, " is complete. Thank you for using JAMS. Use JAMSbeta to compare between JAMS samples."))
flog.info(print_jams_ASCII())
