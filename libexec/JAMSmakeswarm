#!/usr/bin/env Rscript
suppressPackageStartupMessages(library(RCurl))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
suppressPackageStartupMessages(library(futile.logger))
suppressPackageStartupMessages(library(parallel))
suppressPackageStartupMessages(library(benchmarkme))
suppressPackageStartupMessages(library(openxlsx))
#####################################
# Define System-specific Functions ##
#####################################
if ((.Platform$OS.type) != "unix"){
    stop("This script only works on UNIX. Install Linux and try again.")
}

#Get slurm job ID
slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))

#Decide which kind of system you are on.
if(nchar(slurmjobid) < 3){
   print("You are not on a Slurm Workload Cluster")
   #Define appropriate functions for non-slurm system
   detectBatchCPUs <- function() {
        ncores <- detectCores()
        if (is.na(ncores)) {
            stop("Could not determine how many CPUs you have. Aborting.")
        }
        return(ncores)
    }

    detectAvailRAM <- function(){
        totmembytes<-as.numeric(get_ram())

        return(totmembytes)
    }

} else {
    print(paste("You are on a Slurm Workload Manager Cluster under jobID", slurmjobid))
    #Define appropriate functions for slurm system
    detectBatchCPUs <- function() {
        slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))
        ncores <- as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK"))

        if (is.na(ncores)) {
            #Try plan B
            sacctraw <- system2("sacct", args = c("-j", slurmjobid, "-X", "-P"), stdout = TRUE)
            jobinforaw <- sacctraw[2]
            jobinfoheaders <- sacctraw[1]
            jobinfo <- unlist(strsplit(jobinforaw, split="\\|"))
            names(jobinfo) <- unlist(strsplit(jobinfoheaders, split="\\|"))
            ncores <- as.integer(jobinfo["AllocCPUS"])
            print(jobinfo)
            if (is.na(ncores)) {
                stop("Could not determine how many CPUs you have. Aborting.")
            }
        }

        return(ncores)
    }


    detectAvailRAM <- function(){
        mempercpu <- as.integer(Sys.getenv("SLURM_MEM_PER_CPU"))
        mempernode <- as.integer(Sys.getenv("SLURM_MEM_PER_NODE"))
        cpuspertask <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))

        if (!(is.na(mempernode))){
            totmem <- mempernode
        } else {
            totmem <- mempercpu * cpuspertask
        }

        totmembytes <- totmem * 1000000

        return(totmembytes)
    }
}

############################
## Define other functions ##
############################
filetype <- function(path){
    f = file(path)
    ext = summary(f)$class
    close.connection(f)
    ext
}

# get path of running script
getScriptPath <- function() {
    cmdArgs <- commandArgs(trailingOnly = FALSE)
    needle <- "--file="
    match <- grep(needle, cmdArgs)
    if (length(match) > 0) {
        return(dirname(normalizePath(sub(needle, "", cmdArgs[match]))))
    } else {
        return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
    }
}

#Fix path relativity
fixrelpath <- function(JAMSpath = NULL){
    require(R.utils)
    if (!(isAbsolutePath(JAMSpath))){
        fixedpath <- getAbsolutePath(JAMSpath)
    } else {
        fixedpath <- JAMSpath
    }
    #Chomp a "/" from the end of paths
    fixedpath <- gsub("/$", "", fixedpath)

    return(fixedpath)
}

analyze_fastq_filename <- function(fn = NULL, maintain_Illumina_format = FALSE){

    filefacts <- list()
    fnsplit <- unlist(strsplit(fn, split = "\\."))
    #find out if gzipped and what the filename body is
    if (tail(fnsplit, n = 1) == "gz"){
        filefacts$gunzipped <- TRUE
        fnbody <- paste0(rev(rev(fnsplit)[3:length(fnsplit)]), collapse = ".")
        filefacts$suffix <- paste0(tail(fnsplit, n = 2), collapse = ".")
    } else {
        filefacts$gunzipped <- FALSE
        fnbody <- paste0(rev(rev(fnsplit)[2:length(fnsplit)]), collapse = ".")
        filefacts$suffix <- tail(fnsplit, n = 1)
    }

    #Now delve into fnbody and see what it it about
    #Does it have lane info? Must have L00X in the last 4 elements.
    contains_lane_info <- any(c("L001", "L002", "L003", "L004", "L005", "L006", "L007", "L008") %in% tail(unlist(strsplit(fnbody, split = "_")), n = 4))
    #Does it have paired read info? Must have RX in the last 4 elements.
    contains_paired_read_info <- any(c("R1", "R2") %in% tail(unlist(strsplit(fnbody, split = "_")), n = 4))
    #Is it Illumina output filename style?
    is_Illumina_output <- (tail(unlist(strsplit(fnbody, split = "_")), n = 1) == "001")
    #Get number of body segments
    numfnbodysegments <- length(unlist(strsplit(fnbody, split = "_")))

    #Determine the orgininal sample prefix
    #Case 1, not Illumina style
    if (!is_Illumina_output){
        if (contains_paired_read_info){
            filefacts$OriPrefix <- paste0(unlist(strsplit(fnbody, split = "_"))[1:(numfnbodysegments - 1)], collapse = "_")
            filefacts$Read <- tail(unlist(strsplit(fnbody, split = "_")), n = 1)
        } else {
            filefacts$OriPrefix <- fnbody
            filefacts$Read <- ""
        }
        filefacts$Appendage <- paste0(".", filefacts$suffix)
    } else {
        #OK, is Illumina style prefix
        #Das Read ist immer an zweiter position
        filefacts$Read <- tail(unlist(strsplit(fnbody, split = "_")), n = 2)[1]

        if (contains_lane_info){
            #Case 2, is MiSeq, HiSeq or NextSeq file
            filefacts$OriPrefix <- paste0(unlist(strsplit(fnbody, split = "_"))[1:(numfnbodysegments - 4)], collapse = "_")
            filefacts$Lane <- tail(unlist(strsplit(fnbody, split = "_")), n = 3)[1]
            filefacts$SampNum <- tail(unlist(strsplit(fnbody, split = "_")), n = 4)[1]
            if (maintain_Illumina_format){
                filefacts$Appendage <- paste(paste(filefacts$SampNum, filefacts$Lane, filefacts$Read, "001", sep = "_"), filefacts$Container, sep = ".")
            } else {
                filefacts$Appendage <- paste(filefacts$Read, filefacts$suffix, sep = ".")
            }
        } else {
            #Case 3, is NovaSeq joined file, or contains no lane info
            filefacts$OriPrefix <- paste0(unlist(strsplit(fnbody, split = "_"))[1:(numfnbodysegments - 3)], collapse = "_")
            filefacts$Lane <- ""
            filefacts$SampNum <- tail(unlist(strsplit(fnbody, split = "_")), n = 3)[1]
            if (maintain_Illumina_format){
                filefacts$Appendage <- paste(paste(filefacts$SampNum, filefacts$Read, "001", sep = "_"), filefacts$suffix, sep = ".")
            } else {
                filefacts$Appendage <- paste(filefacts$Read, filefacts$suffix, sep = ".")
            }
        }
    }

    return(filefacts)

}

#########################
# Get options from args #
#########################
#Define defaults
defopt <- list()
defopt$verstr <- paste0("JAMSmakeswarm v", "1.0")
defopt$outputfolder <- getwd()
defopt$readsfolder <- NULL
defopt$hostspecies <- "human"
defopt$analysis <- "metagenome"
defopt$skipinterpro <- FALSE
defopt$jamsdb <- NULL
defopt$swarmfile <- fixrelpath(JAMSpath = "JAMS.swarm")

option_list <- list(
    make_option(c("-r", "--readsfolder"), default = defopt$readsfolder, action="store",
                help = str_c("path to root directory where reads are (default: ", defopt$readsfolder, ")")),

    make_option(c("-o", "--outputfolder"), default = defopt$outputfolder, action="store",
                help = str_c("path to where you want the JAMSalpha outputs (default: ", defopt$outputfolder, ")")),

    make_option(c("-H", "--hostspecies"), default = defopt$hostspecies, action="store",
                help = str_c("Name or taxid of host species (default: ", defopt$hostspecies, ")")),

    make_option(c("-A", "--analysis"), default = defopt$analysis, action="store",
                help = str_c("Project type. Choose between metagenome, metatranscriptome, isolate or isolaternaseq. (default: ", defopt$analysis, ")")),

    make_option(c("-d", "--jamsdb"), default = defopt$jamsdb, action="store",
                help = str_c("Path to JAMS database.")),

    make_option(c("-p", "--prefixlist"), default = NULL, action="store",
                help = str_c("Text file with a list of read prefixes to restrict swarm to.")),

    make_option(c("-t", "--substitutionmap"), default = NULL, action="store",
                help = str_c("Tab limited text file for sample name substitution in the format: oldname[TAB]newname")),

    make_option(c("-x", "--substitutionspreadsheet"), default = NULL, action="store",
                help = str_c("Tab limited xlsx spreadsheet for sample name substitution. Will look for a column named OriPrefix and substitute that value for the corresponding one on the Sample column.")),

    make_option(c("-g", "--sralist"),
                default = NULL, action="store", help = str_c("List of SRA accessions to get reads for assembly.")),

    make_option(c("-a", "--gcalist"),
                default = NULL, action="store", help = str_c("List of GCA accessions to get assembly contigs from GenBank (example: GCA_000969225.1).")),

    make_option(c("-z", "--appendtoprefix"),
                default = NULL, action="store", help = str_c("Append this string to prefix. Example: -z Bis would generate a prefix in the form of PrefixBis")),

    make_option(c("-b", "--prependtoprefix"),
                default = NULL, action="store", help = str_c("Prepend this string to prefix. Example: -b New123 would generate a prefix in the form of New123Prefix")),

    make_option(c("-n", "--useipro"), default = FALSE, action="store_true",
                help = str_c("Use -n option in swarm file, for automatically launching InterproScan if on NIH Biowulf, if available.)")),

#Phased out in JAMS2
#    make_option(c("-m", "--use_metabat"), default = FALSE, action="store_true",
#                help = str_c("Use -m option in swarm file, for classifying binning contigs into MAGs using MetaBAT2.)")),

#Phased out in JAMS2
#    make_option(c("-q", "--classifyunassembled"), default = FALSE, action="store_true",
#                help = str_c("Use -q option in swarm file, for classifying unassembled reads.)")),

    make_option(c("-s", "--swarmfile"), default = defopt$swarmfile, action="store",
                help = str_c("File name for swarm file to be created (default: ", defopt$swarmfile, ")")),

    make_option(c("-l", "--split_swarmfile"), default = NULL, action="store",
                help = str_c("Split swarm into multiple files with this number of lines each. Filenames will be appended with numbers (Example: Project.swarm001, Project.swarm002, etc...). Omit for no splitting.")),

    make_option(c("-c", "--checkprefixexists"), default = NULL,
                action="store", help = str_c("Optional path to folder with banked .jams files. If prefix already exists a warning is issued.")),

    make_option(c("-v", "--version"), action="store_true",
                help ="report version")
)


# parse the options
args <- commandArgs(trailingOnly = TRUE)
opt <- parse_args(OptionParser(option_list = option_list), args)
opt <- merge.list(opt, defopt)

#####################
## Set environment ##
#####################

# print version & exit if -v
if (!is.null(opt$version)) {
    print(opt$verstr)
    quit()
}

#Get Script path
opt$bindir <- getScriptPath()

for (pathtofix in c("readsfolder", "outputfolder", "prefixlist", "swarmfile", "jamsdb", "substitutionmap", "substitutionspreadsheet")){
    if (!is.null(opt[[pathtofix]])){
        opt[[pathtofix]] <- fixrelpath(opt[[pathtofix]])
    }
}

#Define useful functions
is.redundant <- function(vec){
    propunique <- length(unique(vec))/length(vec)
    if (propunique < 1){
        redundant = TRUE
    } else {
        redundant = FALSE
    }

    return(redundant)
}

find_container <- function(x) {
    prefsuff <- unlist(strsplit(rawfastqsdf$Filenames[x], split = "\\."))
    container <- paste(prefsuff[(which(prefsuff %in% c("fastq", "tar"))):(length(prefsuff))], collapse = ".")

    return(container)
}

find_read <- function(x) {
    prefsuff <- unlist(strsplit(rawfastqsdf$Filenames[x], split = "\\."))
    read <- tail(unlist(strsplit(prefsuff[1], split = "_")), n=1)

    return(read)
}

check_prefixes <- function(opt = NULL){
    if (!is.null(opt$checkprefixexists)){
        if (length(opt$usedprefixes) > 0){
            opt$alreadyusedprexixes <- opt$prefixestouse[(opt$prefixestouse %in% opt$usedprefixes)]
            if (length(opt$alreadyusedprexixes) > 0){
                cat("WARNING: THE FOLLOWING PREFIXES HAVE BEEN FOUND IN\n")
                cat(paste(as.character(opt$checkprefixexists), "\n"))
                cat(paste(paste0(opt$alreadyusedprexixes, collapse = ", "), "\n"))
                cat("THESE PREFIXES HAVE BEEN ELIMINATED FROM THE SWARM FILE GENERATED.\n")
                opt$prefixestouse <- opt$prefixestouse[!(opt$prefixestouse %in% opt$usedprefixes)]
                if (!is.null(opt$wantedaccessions)){
                    opt$wantedaccessions <- opt$wantedaccessions[!(opt$prefixestouse %in% opt$usedprefixes)]
                }
            }
        }
    }

    return(opt)
}

###################
## Main Function ##
###################
#suppressPackageStartupMessages(library(JAMS))

#Evaluate prefix restrictions. Order of precedence is spreadsheet, substitutionmap, prefixlist.

if (!(is.null(opt$substitutionspreadsheet))){

    #Get spreadsheet
    substitutiondf <- read.xlsx(opt$substitutionspreadsheet)
    #Check for wanted columns
    if (!all(c("Sample", "OriPrefix") %in% colnames(substitutiondf))){
        missingcols <- c("Sample", "OriPrefix")[!(c("Sample", "OriPrefix") %in% colnames(substitutiondf))]
        flog.info(paste("Unable to find the", paste0(missingcols, collapse = ", "), "column(s) in the spreadsheet."))
        if ("Sample" %in% colnames(substitutiondf)){
            flog.info("Found a Sample column in the spreadsheet. Prefixes will be restricted to those in this column.")
            wantedprefixes <- as.character(substitutiondf$Sample)
        }
    } else {
        substitutiondf <- substitutiondf[ , c("Sample", "OriPrefix")]
        substitutiondf$Sample <- as.character(substitutiondf$Sample)
        substitutiondf$OriPrefix <- as.character(substitutiondf$OriPrefix)
        wantedprefixes <- substitutiondf$OriPrefix
    }

} else if (!(is.null(opt$substitutionmap))){

    #Get substitutionmap
    substitutiondf <- data.table::fread(opt$substitutionmap, stringsAsFactors = FALSE, data.table = FALSE, header = FALSE)
    substitutiondf <- substitutiondf[ , 1:2]
    colnames(substitutiondf) <- c("Sample", "OriPrefix")
    wantedprefixes <- as.character(substitutiondf$OriPrefix)

} else if (!(is.null(opt$prefixlist))){

    #wantedprefixes <- read.table(opt$prefixlist, header = FALSE, sep = " ", stringsAsFactors = FALSE)
    wantedprefixes <- data.table::fread(opt$prefixlist, stringsAsFactors = FALSE, data.table = FALSE, header = FALSE)
    wantedprefixes <- as.character(wantedprefixes[, 1])
    substitutiondf <- NULL

} else {

    substitutiondf <- NULL
    wantedprefixes <- NULL

}

commonoptions <- paste("-d", opt$jamsdb, "-A", opt$analysis, "-o", opt$outputfolder, "-H", opt$hostspecies, collapse = " ")
if (opt$skipinterpro == TRUE) {
    commonoptions <- paste(commonoptions, "-n", collapse = " ")
}

if (opt$use_metabat == TRUE) {
    commonoptions <- paste(commonoptions, "-m", collapse = " ")
}

finalswarm <- NULL
swarm <- NULL

if (!is.null(opt$checkprefixexists)){
    cat("Checking if prefixes in swarm file coincide with prefixes in:\n")
    cat(paste(as.character(opt$checkprefixexists), "\n"))
    jamsfns <- list.files(path = opt$checkprefixexists, pattern = ".jams$", full.names = FALSE, recursive = TRUE, include.dirs = FALSE)
    opt$usedprefixes <- sapply(1:length(jamsfns), function(x) { tail(unlist(strsplit(unlist(strsplit(jamsfns[x], split = "\\."))[1], split = "\\/")), n = 1) } )
}

if (!(is.null(opt$readsfolder))){
    flog.info("Searching for reads files in reads folder.")
    rawfastqpaths <- list.files(path = opt$readsfolder, pattern = "fastq$|gz$", full.names = TRUE, recursive = TRUE)
    rawfastqnames <- sapply(1:length(rawfastqpaths), function(x) { tail(unlist(strsplit(rawfastqpaths[x], split = "/")), n = 1) })
    datasetids <- sapply(1:length(rawfastqpaths), function(x) { tail(unlist(strsplit(rawfastqpaths[x], split = "/")), n = 2)[1] })

    #Make a dataframe with all the info
    rawfastqsdf <- data.frame(Filenames = rawfastqnames, Filepaths = rawfastqpaths, DatasetIDs = datasetids, stringsAsFactors = FALSE)

    #rawfastqsdf$Read <- sapply(1:nrow(rawfastqsdf), function(x) { find_read(x) } )
    rawfastqsdf$Read <- sapply(1:nrow(rawfastqsdf), function(x) { analyze_fastq_filename(fn = rawfastqsdf$Filenames[x])[["Read"]] } )
    rawfastqsdf$Container <- sapply(1:nrow(rawfastqsdf), function(x) { find_container(x) } )
    #rawfastqsdf$Prefix <- sapply(1:nrow(rawfastqsdf), function(x) { paste(unlist(strsplit(rawfastqsdf$Filenames[x], split = "_"))[1:((which(unlist(strsplit(rawfastqsdf$Filenames[x], split = "_")) == tail(unlist(strsplit(rawfastqsdf$Filenames[x], split = "_")), n = 4)[1])) - 1)], collapse = "_") } )
    rawfastqsdf$OriPrefix <- sapply(1:nrow(rawfastqsdf), function(x) { analyze_fastq_filename(fn = rawfastqsdf$Filenames[x])[["OriPrefix"]] } )

    if (!(is.null(wantedprefixes))){
         rawfastqsdf <- subset(rawfastqsdf, OriPrefix %in% wantedprefixes)
         if (nrow(rawfastqsdf) < 1){
             flog.info("Could not find a single prefix requested in the reads folder supplied.")
             q()
         }
    }

    if (!is.null(substitutiondf)){
        rawfastqsdf <- left_join(rawfastqsdf, substitutiondf, by = "OriPrefix")
        colnames(rawfastqsdf)[which(colnames(rawfastqsdf) == "Sample")] <- "Prefix"
    } else {
        colnames(rawfastqsdf)[which(colnames(rawfastqsdf) == "OriPrefix")] <- "Prefix"
    }

    opt$prefixestouse <- unique(rawfastqsdf$Prefix)
    opt <- check_prefixes(opt = opt)

    for (p in 1:length(opt$prefixestouse)){
        prefix <- opt$prefixestouse[p]
        relevantfiles <- subset(rawfastqsdf, Prefix == prefix)
        if (all(c("R1", "R2") %in% relevantfiles$Read)) {
            FR <- paste("-f", relevantfiles$Filepaths[which(relevantfiles$Read == "R1")], sep = " ")
            RR <- paste("-r", relevantfiles$Filepaths[which(relevantfiles$Read == "R2")], sep = " ")
            readsinput <- paste(FR, RR)
        } else {
            if (relevantfiles$Container[1] == "tar.gz"){
                readsinput <- paste("-t", relevantfiles$Filepaths[1])
            } else {
                readsinput <- paste("-U", relevantfiles$Filepaths[1])
            }
        }
        swarm[p] <- paste("JAMSalpha", readsinput, commonoptions, "-p", paste0(opt$prependtoprefix, prefix, opt$appendtoprefix), collapse = " ")
    }
    finalswarm <- append(swarm, finalswarm)
}


if (any(c((!is.null(opt$sralist)), (!is.null(opt$gcalist))))) {
    for(lst in c("sralist", "gcalist")){
        if(!is.null(opt[[lst]])){
            swarm <- NULL
            flag <- switch(lst, "sralist" = "-g", "gcalist" = "-a")
            #wantedaccessions <- read.table(opt[[lst]], header = FALSE, sep = " ", stringsAsFactors = FALSE)
            wantedaccessions <- data.table::fread(opt[[lst]], stringsAsFactors = FALSE, data.table = FALSE, header = FALSE)
            opt$wantedaccessions <- as.character(wantedaccessions[, 1])
            cleanprefixes <- unname(sapply(opt$wantedaccessions, function(x) { gsub("_", "", x) }))
            opt$prefixestouse <- unname(sapply(cleanprefixes, function (x) { unlist(strsplit(x, split = "\\."))[1] } ))
            opt <- check_prefixes(opt = opt)

            for (p in 1:length(opt$prefixestouse)){
                prefix <- opt$prefixestouse[p]
                accession <- opt$wantedaccessions[p]
                readsinput <- paste(flag, accession)
                swarm[p] <- paste("JAMSalpha", readsinput, commonoptions, "-p", paste0(opt$prependtoprefix, prefix, opt$appendtoprefix), collapse = " ")
            }
            finalswarm <- append(swarm, finalswarm)
        }
    }
}

#Write swarm file to system
if (!is.null(opt$split_swarmfile)){
    swarmlist <- split(finalswarm, ceiling(seq_along(finalswarm) / as.numeric(opt$split_swarmfile)))
    for (swm in 1:length(swarmlist)){
        appendix <- str_pad(swm, nchar(length(swarmlist)), pad = "0")
        cat(swarmlist[[swm]], file = paste0(opt$swarmfile, appendix), sep = "\n")
    }
} else {
    cat(finalswarm, file = opt$swarmfile, sep = "\n")
}
